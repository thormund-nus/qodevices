#!/usr/bin/env python3
"""
Anritsu Spectrum Analyzer MS2732B VISA driver

Thormund - 2023 Initial version for interacting with Anritsu PM2732B RF
    Spectrum Analyzer. Adds basic methods such as specifying Centre Frequency,
    Bandwidth, Averaging of Traces, and file saving methods.
"""

__all__ = ["AnritsuMS2732BDriver"]

import logging
from pyvisa.resources.usb import USBInstrument
from pyvisa import ResourceManager
from pyvisa.errors import VisaIOError
from time import sleep


class AnritsuMS2732BDriver(USBInstrument):
    def __init__(self, rsc_str: str, delayed_write: bool=False):
        """Generates instance of Anritsu MS2732B driver.

        Documentation is as provided in https://dl.cdn-anritsu.com/en-us/test-measurement/files/Manuals/Programming-Manual/10580-00176.pdf # noqa: E501
        or newer.
        Class is build on pvisa library from pyvisa/pyvisa repository.
        """
        rm = ResourceManager()
        self.my_resource = rm.open_resource(rsc_str)
        print("""Resource has been opened.
            Close connection by using del on instance.""")
        # self.my_resource.flush()  # Not implemented

        # TODO: Store into class or it might get purged
        self.trace_preamble = None

        # See write_to_device method.
        self.delayed_write = delayed_write
        self.write_queue = []

    # Typecasts all methods and properties of self.my_resource to self
    def __getattr__(self, __name: str):
        if __name in ('_logging_extra', '_resource_name', '_session', 'visalib'):
            return getattr(self.my_resource, __name)
        else:
            raise AttributeError(f"{__name = }")

    @property
    def ask(self):
        return self.my_resource.query

    def __del__(self) -> None:
        if self.my_resource._session is not None:
            # self.my_resource.flush()
            self.my_resource.close()

